name: CI
on: [ push, pull_request ]

jobs:
  version:
    name: "Get Version"
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - id: bump_version
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: anothrNick/github-tag-action@1.26.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_BRANCHES: master
          DRY_RUN: true
      - id: bump_version_dev
        if: ${{ (!github.event.issue.pull_request && github.ref == 'refs/heads/develop') }}
        uses: anothrNick/github-tag-action@1.26.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_BRANCHES: develop
          DRY_RUN: true
          DEFAULT_BUMP: patch
      - id: version
        name: Create Version
        run: |
          if [ -n "${{ steps.bump_version.outputs.new_tag }}" ]
          then
            echo ::set-output name=VERSION::${{ steps.bump_version.outputs.new_tag }}
          elif [ -n "${{ steps.bump_version_dev.outputs.new_tag }}" ]
          then
            echo ::set-output name=VERSION::${{ steps.bump_version_dev.outputs.new_tag }}
          else
            echo ::set-output name=VERSION::$GITHUB_RUN_ID
          fi

  checks:
    name: "Lint & Test"
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - uses: subosito/flutter-action@v1
        with:
          channel: 'dev'
      - name: "Lint"
        run: |
          touch .env
          flutter analyze
      - name: "Test"
        run: flutter test
      - name: "Upload failure Screenshots"
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: golden-failures
          path: test/failures

  #########
  # macos #
  #########
  build-macos:
    name: "Build MacOS"
    runs-on: macos-latest
    needs: version
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - name: "Setup Code signing"
        env:
          DEV_P12_CERT: ${{ secrets.DEV_P12_CERT }}
          DIST_P12_CERT: ${{ secrets.DIST_P12_CERT }}
          DEV_P12_PASS: ${{ secrets.DEV_P12_PASS }}
          DIST_P12_PASS: ${{ secrets.DIST_P12_PASS }}
          IOS_PROVISION: ${{ secrets.IOS_PROVISION }}
          MAC_PROVISION: ${{ secrets.MAC_PROVISION }}
        run: |
          bash ~/.github/workflows/utils/set-keychain-certs.sh
      - uses: subosito/flutter-action@v1
        with:
          channel: 'dev'
      - name: "Build"
        run: |
          flutter config --enable-macos-desktop
          flutter pub get
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]
          then
            echo "${{ secrets.B64_ENV }}" | base64 --decode > .env
          else
            echo "${{ secrets.B64_DEV_ENV }}" | base64 --decode > .env
          fi
          flutter build macos --release --build-name=${{ needs.version.outputs.version }}

      - name: "Create App"
        env:
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
          FASTLANE_SESSION: ${{ secrets.FASTLANE_SESSION }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
        run: |
          flutter config --enable-macos-desktop
          flutter pub get

          if [[ "${{ github.ref }}" == "refs/heads/master" ]]
          then
            echo "${{ secrets.B64_ENV }}" | base64 --decode > .env
          else
            echo "${{ secrets.B64_DEV_ENV }}" | base64 --decode > .env
          fi

          cd macos

          # write version
          xcrun agvtool new-marketing-version ${{ needs.version.outputs.version }}
          xcrun agvtool new-version -all ${{ needs.version.outputs.version }}

          pod install

          gem install fastlane
          fastlane mac build

      - name: "Create .dmg"
        continue-on-error: true
        run: |
          npm install --global create-dmg
          mkdir dmg
          create-dmg ./notifi.app dmg/
      - name: "Store .dmg artifact"
        uses: actions/upload-artifact@v2
        with:
          name: notifi-dmg
          path: dmg/
          if-no-files-found: error

  deploy-macos:
    name: "Deploy MacOS"
    if: ${{ github.ref == 'refs/heads/master' || (!github.event.issue.pull_request && github.ref == 'refs/heads/develop') }}
    runs-on: macos-latest
    needs: [ checks, build-macos, version ]
    steps:
      - uses: actions/download-artifact@v2
        id: download
        with:
          name: notifi-dmg
      - name: "Deploy .dmg as GH release"
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: ${{ github.ref == 'refs/heads/develop' }}
          automatic_release_tag: ${{ needs.version.outputs.version }}
          title: "Release ${{ needs.version.outputs.version }}"
          files: |
            ${{steps.download.outputs.download-path}}

  #########
  #  iOS  #
  #########
  build-ios:
    name: "Build & Deploy iOS"
    if: ${{ github.ref == 'refs/heads/master' || (!github.event.issue.pull_request && github.ref == 'refs/heads/develop') }}
    runs-on: macos-latest
    needs: [ version ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - name: "Setup Code signing"
        env:
          DEV_P12_CERT: ${{ secrets.DEV_P12_CERT }}
          DIST_P12_CERT: ${{ secrets.DIST_P12_CERT }}
          DEV_P12_PASS: ${{ secrets.DEV_P12_PASS }}
          DIST_P12_PASS: ${{ secrets.DIST_P12_PASS }}
          IOS_PROVISION: ${{ secrets.IOS_PROVISION }}
          MAC_PROVISION: ${{ secrets.MAC_PROVISION }}
        run: |
          bash ~/.github/workflows/utils/set-keychain-certs.sh
      - uses: subosito/flutter-action@v1
        with:
          channel: 'dev'

      - name: "Build & Deploy"
        env:
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
          FASTLANE_SESSION: ${{ secrets.FASTLANE_SESSION }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
        run: |
          flutter pub get
          if [[ "${{ github.ref }}" != "refs/heads/master" ]]
          then
            echo "${{ secrets.B64_DEV_ENV }}" | base64 --decode > .env
          else
            echo "${{ secrets.B64_ENV }}" | base64 --decode > .env
          fi

          cd ios

          # write version
          xcrun agvtool new-marketing-version ${{ needs.version.outputs.version }}
          xcrun agvtool new-version -all ${{ needs.version.outputs.version }}

          pod install

          gem install fastlane
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]
          then
            fastlane asdeploy
          else
            fastlane tfdeploy
          fi
