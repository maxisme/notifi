name: CI
on: [ push, pull_request ]

jobs:
  version:
    name: "Get Version"
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - id: bump_version
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: anothrNick/github-tag-action@1.26.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_BRANCHES: master
          DRY_RUN: true
      - id: bump_version_dev
        if: ${{ (!github.event.issue.pull_request && github.ref == 'refs/heads/develop') }}
        uses: anothrNick/github-tag-action@1.26.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_BRANCHES: develop
          DRY_RUN: true
          DEFAULT_BUMP: patch
      - id: version
        name: Create Version
        run: |
          if [ -n "${{ steps.bump_version.outputs.new_tag }}" ]
          then
            echo ::set-output name=VERSION::${{ steps.bump_version.outputs.new_tag }}
          elif [ -n "${{ steps.bump_version_dev.outputs.new_tag }}" ]
          then
            echo ::set-output name=VERSION::${{ steps.bump_version_dev.outputs.new_tag }}
          else
            echo ::set-output name=VERSION::$GITHUB_RUN_ID
          fi

  checks:
    name: "Lint & Test"
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - uses: subosito/flutter-action@v1
        with:
          channel: 'dev'
      - name: "Lint"
        run: |
          touch .env
          flutter analyze
      - name: "Test"
        run: flutter test
      - name: "Upload Failure Screenshots"
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: golden-failures
          path: test/failures

  #########
  # macos #
  #########
  build-macos:
    name: "Build MacOS"
    runs-on: macos-latest
    needs: version
    steps:
      - uses: actions/checkout@v2
      - name: "Gen Keychain"
        env:
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        continue-on-error: true
        run: |
          echo "${{ secrets.APPLE_AUTH_KEY_P8 }}" | base64 --decode > AuthKey_MK4628AYTK.p8
          mkdir ~/.private_keys
          cp AuthKey_MK4628AYTK.p8 ~/.private_keys/
          cd macos
          gem install fastlane
          fastlane keychain
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - uses: subosito/flutter-action@v1
        with:
          channel: 'dev'
      - name: "Build"
        run: |
          flutter config --enable-macos-desktop
          flutter pub get
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]
          then
          echo "${{ secrets.B64_DEV_ENV }}" | base64 --decode > .env
          else
          echo "${{ secrets.B64_ENV }}" | base64 --decode > .env
          fi
          flutter build macos --release --build-name=${{ needs.version.outputs.version }}
          /usr/bin/codesign --force --deep -s Z28DW76Y3W build/macos/Build/Products/Release/notifi.app
      - name: "Create .dmg"
        run: |
          npm install --global create-dmg
          mkdir dmg
          create-dmg build/macos/Build/Products/Release/notifi.app dmg/
      - name: "Notarize .dmg"
        continue-on-error: true
        run: |
          /usr/bin/codesign --force --deep -s Z28DW76Y3W dmg/*
          xcrun altool -t osx --primary-bundle-id it.notifi.notifi --output-format xml --notarize-app -f dmg/* --apiKey MK4628AYTK --apiIssuer 69a6de80-d5bc-47e3-e053-5b8c7c11a4d1
          xcrun stapler staple dmg/*
      - name: "Store .dmg artifact"
        uses: actions/upload-artifact@v2
        with:
          name: notifi-dmg
          path: dmg/
          if-no-files-found: error

  #########
  #  iOS  #
  #########
  build-ios:
    name: "Build & Deploy iOS"
    if: ${{ github.ref == 'refs/heads/master' || (!github.event.issue.pull_request && github.ref == 'refs/heads/develop') }}
    runs-on: macos-latest
    needs: [ version ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'

      - uses: subosito/flutter-action@v1
        with:
          channel: 'dev'

      - name: "Build & Deploy"
        env:
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        run: |
          flutter pub get
          if [[ "${{ github.ref }}" != "refs/heads/master" ]]
          then
            echo "${{ secrets.B64_DEV_ENV }}" | base64 --decode > .env
          else
            echo "${{ secrets.B64_ENV }}" | base64 --decode > .env
          fi

          echo "${{ secrets.APPLE_AUTH_KEY_P8 }}" | base64 --decode > AuthKey_MK4628AYTK.p8

          cd ios
          flutter pub get

          # write version
          xcrun agvtool new-marketing-version ${{ needs.version.outputs.version }}
          xcrun agvtool new-version -all ${{ needs.version.outputs.version }}

          pod install

          gem install fastlane

          if [[ "${{ github.ref }}" == "refs/heads/master" ]]
          then
            fastlane asdeploy
          else
            fastlane tfdeploy
          fi

  # Create release
  release:
    name: "Release"
    if: ${{ github.ref == 'refs/heads/master' || (!github.event.issue.pull_request && github.ref == 'refs/heads/develop') }}
    runs-on: macos-latest
    needs: [ checks, build-macos, build-ios, version ]
    steps:
      - uses: actions/download-artifact@v2
        id: download
        with:
          name: notifi-dmg
      - name: "Create Release"
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: ${{ github.ref == 'refs/heads/develop' }}
          automatic_release_tag: ${{ needs.version.outputs.version }}
          title: "Release ${{ needs.version.outputs.version }}"
          files: |
            ${{steps.download.outputs.download-path}}
