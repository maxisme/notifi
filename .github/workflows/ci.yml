name: CI
on: [ push ]

jobs:
  checks:
    name: "Lint & Test"
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - uses: subosito/flutter-action@v1
        with:
          channel: 'dev'
      - name: "Lint"
        run: |
          touch .env
          flutter analyze
      - name: "Test"
        run: flutter test
      - name: "Upload Failure Screenshots"
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: golden-failures
          path: test/failures

  version:
    name: "Get Version"
    needs: checks
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
      last_version: ${{ steps.version.outputs.LAST_VERSION }}
      changelog: ${{ steps.version.outputs.CHANGELOG }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - id: bump_version
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: anothrNick/github-tag-action@1.26.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_BRANCHES: master
          DRY_RUN: true
      - id: bump_version_dev
        if: ${{ (!github.event.issue.pull_request && github.ref == 'refs/heads/develop') }}
        uses: anothrNick/github-tag-action@1.26.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_BRANCHES: develop
          DRY_RUN: true
          DEFAULT_BUMP: patch
      - id: version
        name: Create Version
        run: |
          if [ -n "${{ steps.bump_version.outputs.new_tag }}" ]
          then
            echo ::set-output name=VERSION::${{ steps.bump_version.outputs.new_tag }}
            echo ::set-output name=LAST_VERSION::${{ steps.bump_version.outputs.ag }}
          elif [ -n "${{ steps.bump_version_dev.outputs.new_tag }}" ]
          then
            echo ::set-output name=VERSION::${{ steps.bump_version_dev.outputs.new_tag }}
            echo ::set-output name=LAST_VERSION::${{ steps.bump_version_dev.outputs.tag }}
          else
            echo ::set-output name=VERSION::$GITHUB_RUN_ID
            echo ::set-output name=LAST_VERSION::$GITHUB_RUN_ID
          fi

          changelog=$(git log --pretty=format:"* %s" "HEAD...${{ steps.bump_version_dev.outputs.tag }}" | uniq)
          changelog="${changelog//'%'/'%25'}"
          changelog="${changelog//$'\n'/'%0A'}"
          changelog="${changelog//$'\r'/'%0D'}"
          echo "::set-output name=CHANGELOG::$changelog"

  #########
  # macos #
  #########
  build-macos:
    name: "Build MacOS"
    runs-on: macos-latest
    needs: version
    steps:
      - uses: actions/checkout@v2
      - name: "Gen Keychain"
        env:
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        continue-on-error: true
        run: |
          echo "${{ secrets.APPLE_AUTH_KEY_P8 }}" | base64 --decode > AuthKey_MK4628AYTK.p8
          mkdir ~/.private_keys
          cp AuthKey_MK4628AYTK.p8 ~/.private_keys/
          cd macos
          gem install fastlane
          fastlane keychain
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - uses: subosito/flutter-action@v1
        with:
          channel: 'dev'
      - name: "Codesign"
        run: |
          flutter config --enable-macos-desktop
          flutter pub get
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]
          then
            echo "${{ secrets.B64_DEV_ENV }}" | base64 --decode > .env
          else
            echo "${{ secrets.B64_ENV }}" | base64 --decode > .env
          fi

          # write version
          cd macos
          xcrun agvtool new-marketing-version ${{ needs.version.outputs.version }}
          xcrun agvtool new-version -all ${{ needs.version.outputs.version }}

          cd ../

          # build .app
          flutter build macos --release --build-name=${{ needs.version.outputs.version }}

          # codesign .app
          /usr/bin/codesign -vvv --force --deep --options runtime --strict -s Z28DW76Y3W build/macos/Build/Products/Release/notifi.app

          # codesign sparkle auto update
          /usr/bin/codesign -vvv --force --deep --options runtime --strict -s Z28DW76Y3W build/macos/Build/Products/Release/notifi.app/Contents/Frameworks/Sparkle.framework/Versions/A/Resources/Autoupdate.app

          # codesign binaries
          /usr/bin/codesign -vvv --force --deep --options runtime --strict -s Z28DW76Y3W build/macos/Build/Products/Release/notifi.app/Contents/Frameworks/Sparkle.framework/Versions/A/Sparkle
          /usr/bin/codesign -vvv --force --deep --options runtime --strict -s Z28DW76Y3W build/macos/Build/Products/Release/notifi.app/Contents/MacOS/notifi

      - name: "Create & Notarize .dmg"
        env:
          APPLE_USERNAME: ${{ secrets.APPLE_USERNAME }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        run: |
          npm install --global create-dmg

          mkdir dmg/
          create-dmg build/macos/Build/Products/Release/notifi.app dmg/
          mv dmg/* notifi.dmg

          dmg_path="notifi.dmg"

          /usr/bin/codesign -vvv --force --deep --strict --options runtime -s "Z28DW76Y3W" "$dmg_path"

          echo "notarizing..."
          notarize=$(xcrun altool -t osx --primary-bundle-id it.notifi.notifi --output-format json --notarize-app -f "$dmg_path" --username "$APPLE_USERNAME" --password "$APPLE_PASSWORD")
          uuid=$(echo "$notarize" | python3 -c "import sys, json; print(json.load(sys.stdin)['notarization-upload']['RequestUUID'])")
          echo "$uuid"

          # wait for apple to notarize
          sleep 60

          while true; do
            check=$(xcrun altool --notarization-info "$uuid" --output-format json --username "$APPLE_USERNAME" --password "$APPLE_PASSWORD")
            echo $check
            status=$(echo "$check" | python3 -c "import sys, json; print(json.load(sys.stdin)['notarization-info']['Status'])")
            echo $status
            if [ "$status" != "in progress" ]; then
              echo "staple dmg..."
              xcrun stapler staple -v "$dmg_path"
              exit 0
            fi
            sleep 10
          done
          exit 1
      - name: "Store .dmg artifact"
        uses: actions/upload-artifact@v2
        with:
          name: notifi-dmg
          path: notifi.dmg
          if-no-files-found: error

  #########
  #  iOS  #
  #########
  build-ios:
    name: "Build & Deploy iOS"
    if: ${{ !github.event.issue.pull_request && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop') }}
    runs-on: macos-latest
    needs: [ version ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'

      - uses: subosito/flutter-action@v1
        with:
          channel: 'dev'

      - name: "Build & Deploy"
        env:
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        run: |
          if [[ "${{ github.ref }}" != "refs/heads/master" ]]
          then
            echo "${{ secrets.B64_DEV_ENV }}" | base64 --decode > .env
          else
            echo "${{ secrets.B64_ENV }}" | base64 --decode > .env
          fi

          echo "${{ secrets.APPLE_AUTH_KEY_P8 }}" | base64 --decode > AuthKey_MK4628AYTK.p8

          cd ios
          flutter pub get

          # write version
          xcrun agvtool new-marketing-version ${{ needs.version.outputs.version }}
          xcrun agvtool new-version -all $GITHUB_RUN_ID

          pod install

          gem install fastlane

          if [[ "${{ github.ref }}" == "refs/heads/master" ]]
          then
            fastlane asdeploy "changelog:${{ needs.version.outputs.changelog }}"
          else
            fastlane tfdeploy "changelog:${{ needs.version.outputs.changelog }}"
          fi

  release:
    name: "Release"
    if: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' }}
    runs-on: macos-latest
    needs: [ checks, build-macos, build-ios, version ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        id: download
        with:
          name: notifi-dmg
      - name: "Create Release"
        uses: ncipollo/release-action@v1
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          commit: "${{ github.sha }}"
          name: "Release ${{ needs.version.outputs.version }}"
          body: "${{ needs.version.outputs.changelog }}"
          prerelease: ${{ github.ref == 'refs/heads/develop' }}
          tag: ${{ needs.version.outputs.version }}
          artifacts: "${{steps.download.outputs.download-path}}/*"
          artifactErrorsFailBuild: true
