name: MacOS
on: [ push, pull_request ]

jobs:
  version:
    name: "Get Version"
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
      deploy: ${{ steps.version.outputs.SHOULD_DEPLOY }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - id: bump_version
        if: ${{ !github.event.issue.pull_request && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop') }}
        uses: anothrNick/github-tag-action@1.26.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_BRANCHES: .*
          DRY_RUN: true
      - id: version
        name: Create Version
        run: |
          if [ -n "${{ steps.bump_version.outputs.new_tag }}" ]
          then
            echo ::set-output name=SHOULD_DEPLOY::true
            echo ::set-output name=VERSION::${{ steps.bump_version.outputs.new_tag }}
          else
            echo ::set-output name=SHOULD_DEPLOY::false
            echo ::set-output name=VERSION::ci-$GITHUB_RUN_ID
          fi

  checks:
    name: "Lint & Test"
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - uses: subosito/flutter-action@v1
        with:
          channel: 'dev'
      - name: "Lint"
        run: |
          touch .env
          flutter analyze
      - name: "Test"
        run: flutter test
      - name: "Upload failure Screenshots"
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: golden-failures
          path: test/failures

  build:
    name: "Build"
    runs-on: macos-latest
    needs: version
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - uses: subosito/flutter-action@v1
        with:
          channel: 'dev'
      - name: "Build"
        run: |
          flutter config --enable-macos-desktop
          flutter pub get
          echo "${{ secrets.B64_ENV }}" | base64 --decode > .env
          flutter build macos --release --build-name=${{ needs.version.outputs.version }}
      - name: "Create .dmg"
        continue-on-error: true
        run: |
          npm install --global create-dmg
          mkdir dmg
          create-dmg build/macos/Build/Products/Release/notifi.app dmg/
      - name: "Store .dmg artifact"
        uses: actions/upload-artifact@v2
        with:
          name: notifi-dmg
          path: dmg/
          retention-days: 1
          if-no-files-found: error

  deploy:
    name: "Deploy"
    if: ${{ needs.version.outputs.deploy == true }}
    runs-on: macos-latest
    needs: [ checks, build, version ]
    steps:
      - uses: actions/download-artifact@v2
        id: download
        with:
          name: notifi-dmg
      - name: "Deploy .dmg as GH release"
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: ${{ github.ref == 'refs/heads/develop' }}
          automatic_release_tag: ${{ needs.version.outputs.version }}
          title: "Release ${{ needs.version.outputs.version }}"
          files: |
            ${{steps.download.outputs.download-path}}